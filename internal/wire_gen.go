// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"base_service/config"
	"base_service/database"
	"base_service/internal/api"
	grpc3 "base_service/internal/api/grpc"
	"base_service/internal/api/grpc/proto_gen"
	http2 "base_service/internal/api/http"
	"base_service/internal/api/http/v1"
	kafka2 "base_service/internal/api/kafka"
	"base_service/internal/application/user"
	"base_service/internal/application/user/commands/create_user"
	"base_service/internal/application/user/commands/update_user"
	"base_service/internal/application/user/queries/get_user"
	"base_service/internal/infrastructure/persistent/user"
	grpc2 "base_service/internal/metrics/grpc"
	"base_service/internal/metrics/http"
	"base_service/internal/service"
	"github.com/go-redis/redis/v8"
	"github.com/gogovan-korea/ggx-kr-service-utils/kafka"
	"github.com/gogovan-korea/ggx-kr-service-utils/logger"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeContainer(appCfg *config.AppConfig, logger2 logger.Logger, kafkaProducer *kafka.Producer, userServiceClient grpc.UserServiceClient, redisClient redis.UniversalClient, readDb *database.ReadDb, writeDb *database.WriteDb) *api.ApiContainer {
	userQueryRepository := userpersitent.NewUserQueryRepository(readDb)
	cacheRepository := userpersitent.NewUserRedisRepository(logger2, redisClient)
	getUserHandler := getuser.NewGetUserHandler(logger2, userQueryRepository, cacheRepository, userServiceClient)
	userCommandRepository := userpersitent.NewUserCommandRepository(writeDb, logger2)
	updateUserHandler := updateuser.NewUpdateUserHandler(logger2, appCfg, userCommandRepository, cacheRepository, kafkaProducer)
	createUserHandler := createuser.NewCreateUserHandler(logger2, appCfg, userCommandRepository, cacheRepository, kafkaProducer)
	userService := userservice.NewUserService(getUserHandler, updateUserHandler, createUserHandler)
	serviceService := service.NewService(userService)
	httpMetrics := http.NewHttpMetrics(appCfg)
	userHandler := v1.NewUserHandler(serviceService, logger2, httpMetrics)
	server := http2.NewServer(logger2, appCfg, userHandler)
	grpcMetrics := grpc2.NewGrpcMetrics(appCfg)
	grpcServer := grpc3.NewServer(serviceService, logger2, appCfg, grpcMetrics)
	consumer := kafka2.NewConsumer(logger2, appCfg, serviceService)
	apiContainer := api.NewApiContainer(server, grpcServer, consumer)
	return apiContainer
}

// wire.go:

var container = wire.NewSet(api.NewApiContainer)

var apiSet = wire.NewSet(grpc3.NewServer, http2.NewServer, kafka2.NewConsumer)

var metricsSet = wire.NewSet(http.NewHttpMetrics, grpc2.NewGrpcMetrics)

var serviceSet = wire.NewSet(service.NewService, v1.NewUserHandler)

var specificServiceSet = wire.NewSet(userservice.NewUserService)

var handlerSet = wire.NewSet(getuser.NewGetUserHandler, updateuser.NewUpdateUserHandler, createuser.NewCreateUserHandler)

var repoSet = wire.NewSet(userpersitent.NewUserQueryRepository, userpersitent.NewUserCommandRepository, userpersitent.NewUserRedisRepository)
